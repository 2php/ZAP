================================
Test Cases
================================
To add a test case, create a folder sw/<test_case_name>. Within that folder,
create three files <test_case_name>.c, <test_case_name>.s, <test_case_name>.ld
which correspond to the C file, the startup assembly file and the GCC linker
script.

-----------------------
Default test case 
-----------------------
A default factorial test case is already present which computes the factorial 
of 5 (stored in 0x2000) and stores it in 0x2001. and performs some multiplications 
after that to test the multiplier unit.

==================================
Simulating a test case
==================================
The default test case may be simulated by typing 
        csh sample_command.csh
after entering the hw/sim directory. Note that the program is run with cache
and MMU disabled as they are in an experimental state. The sample_command.csh
script calls run_sim.pl which in turn calls the RTL and testbench for simulation
using Icarus Verilog. The command switches are transformed into parameters
and defines to Icarus which in turn configure the bench and RTL.

To run other test cases or to tweak the testbench, options to run_sim.pl may
be given...

Usage :
perl run_sim.pl
+zap_root+<root_directory>                                              -- Root directory of the ZAP project.
[+seed+<seed_value>]                                                    -- Force a specific seed for simulation.
[+sim]                                                                  -- Force register file debug and some extra error messages.
+test+<test_case_name>                                                  -- Run a specific test case. only +test+factorial is available, you may add new tests (see sw folder).
[+cmmu_en]                                                              -- Enable cache and MMU (highly unstable)
+ram_size+<ram_size>                                                    -- Set size of RAM in bench.
+dump_start+<start_addr_of_dump>+<number_of_words_in_dump>              -- Starting memory address to start logging and number of words to log.
[+cache_size+<data_cache_size>+<code_cache_size>]                       -- Specify data and I-cache size in bytes.
[+dtlb+<section_dtlb_entries>+<small_page_entries>+<large_page_entries> -- Specify data TLB entries for section, small and large page TLBs.
[+itlb+<section_itlb_entries>+<small_page_entries>+<large_page_entries> -- Specify I-TLB entries similarly as above.
[+irq_en]                                                               -- Trigger IRQ interrupts from bench.                                        
[+fiq_en]                                                               -- Trigger FIQ interrupts from bench.
+scratch+<scratch_dir>                                                  -- Set scratch directory. Usually set this to /tmp. VCD and logs go there.
+max_clock_cycles+<max_clock_cycles>                                    -- Set maximum clock cycles for which the simulation should run. 
+rtl_file_list+<rtl_file_list>                                          -- Specify RTL file list. See hw/rtl folder.
+tb_file_list+<tb_file_list>                                            -- Specify testbench file list. See hw/tb folder.
+bp+<branch_predictor_entries>                                          -- Number of entries in branch predictor memory.
+fifo+<fifo_depth>                                                      -- Depth of pre-fetch buffer in CPU.
+post_process+<post_process_perl_script_path>                           -- Point this to post_process.pl or any other Perl script. Script runs after sim.
+nodump                                                                 -- Do not write VCD. 

Once the testcase is run, GTKWave is loaded with the VCD.

